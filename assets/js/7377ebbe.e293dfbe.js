"use strict";(self.webpackChunkpersonal_site=self.webpackChunkpersonal_site||[]).push([[4617],{8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>o});var l=t(6540);const s={},a=l.createContext(s);function c(e){const n=l.useContext(a);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),l.createElement(a.Provider,{value:n},e.children)}},9956:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>u,frontMatter:()=>c,metadata:()=>l,toc:()=>i});const l=JSON.parse('{"id":"operating-systems/containers/kubernetes","title":"Kubernetes","description":"Kubernetes is an open-source platform for automating deployment, scaling, and management of containerized applications. It orchestrates clusters of machines to run containers reliably and efficiently, making it a cornerstone of modern cloud-native infrastructure.","source":"@site/docs/operating-systems/containers/kubernetes.md","sourceDirName":"operating-systems/containers","slug":"/operating-systems/containers/kubernetes","permalink":"/docs/operating-systems/containers/kubernetes","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Kubernetes"},"sidebar":"tutorialSidebar","previous":{"title":"Docker","permalink":"/docs/operating-systems/containers/docker"},"next":{"title":"Debian","permalink":"/docs/operating-systems/debian/"}}');var s=t(4848),a=t(8453);const c={title:"Kubernetes"},o=void 0,r={},i=[{value:"\ud83c\udf1f Key Concepts",id:"-key-concepts",level:2},{value:"\ud83d\udcda Useful Links",id:"-useful-links",level:2},{value:"\ud83d\udee0\ufe0f Kubernetes Command Reference",id:"\ufe0f-kubernetes-command-reference",level:2},{value:"Context and configuration",id:"context-and-configuration",level:3},{value:"Pods",id:"pods",level:3},{value:"ReplicaSet",id:"replicaset",level:3},{value:"Deployment",id:"deployment",level:3},{value:"Namespace",id:"namespace",level:3},{value:"Cluster",id:"cluster",level:3},{value:"Env Var, ConfigMaps and Secrets",id:"env-var-configmaps-and-secrets",level:3},{value:"Service Cluster IP",id:"service-cluster-ip",level:3},{value:"Nodes",id:"nodes",level:3},{value:"Rolling Updates and Rollback",id:"rolling-updates-and-rollback",level:3},{value:"Update objects",id:"update-objects",level:3},{value:"Interacting with Nodes and cluster",id:"interacting-with-nodes-and-cluster",level:3},{value:"Upgrade plan",id:"upgrade-plan",level:3},{value:"Backup and Restore Methods",id:"backup-and-restore-methods",level:3},{value:"Inspect Service Logs",id:"inspect-service-logs",level:3},{value:"Service Acccount",id:"service-acccount",level:4},{value:"Security",id:"security",level:3},{value:"Certificates",id:"certificates",level:4},{value:"API Groups",id:"api-groups",level:4},{value:"Role Based Access Controls",id:"role-based-access-controls",level:4},{value:"Cluster Roles Access Controls",id:"cluster-roles-access-controls",level:4}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://kubernetes.io/",children:"Kubernetes"})," is an open-source platform for automating deployment, scaling, and management of containerized applications. It orchestrates clusters of machines to run containers reliably and efficiently, making it a cornerstone of modern cloud-native infrastructure."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"-key-concepts",children:"\ud83c\udf1f Key Concepts"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Pod:"})," The smallest deployable unit, usually running one or more containers."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Node:"})," A worker machine in the cluster (VM or physical)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Cluster:"})," A set of nodes managed by Kubernetes."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Deployment:"})," Manages stateless applications and ensures the desired number of pods are running."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Service:"})," Exposes a set of pods as a network service."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"ConfigMap & Secret:"})," Manage configuration and sensitive data."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Namespace:"})," Virtual clusters within a physical cluster for resource isolation."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"ReplicaSet:"})," Ensures a specified number of pod replicas are running."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Ingress:"})," Manages external access to services, typically HTTP."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"-useful-links",children:"\ud83d\udcda Useful Links"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://helm.sh/",children:"Helm"})," - Kubernetes package manager"]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://iximiuz.com/en/",children:"Learning Containers, Kubernetes, and Backend Development with Ivan Velichko"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/Clivern/Beetle",children:"Beetle - Kubernetes multi-cluster deployment automation"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/infrahq/infra",children:"Infra - Access management for clusters"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://kubernetes.io/docs/reference/kubectl/quick-reference/",children:"kubectl Quick Reference"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://spacelift.io/blog/kubernetes-cheat-sheet",children:"Kubernetes cheat sheet"})}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"\ufe0f-kubernetes-command-reference",children:"\ud83d\udee0\ufe0f Kubernetes Command Reference"}),"\n",(0,s.jsx)(n.h3,{id:"context-and-configuration",children:"Context and configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"alias k=kubectl\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"/root/.kube/config  # kube config file\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"kubectl get all              # list all available resources\nkubectl api-resources --help # print the supported API resources\nkubectl options              # list of global command-line options\n"})}),"\n",(0,s.jsx)(n.h3,{id:"pods",children:"Pods"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"# List pods\nkubectl explain pods              # get the documentation for pod manifests\nkubectl get pod <my-pod> -o yaml > pod-definition.yaml  # get a pod's YAML\nkubectl get pods -o wide --show-labels # list all pods in the namespace\nkubectl get pods --all-namespaces # list all pods in all namespaces\n\n# Create and run pods\nkubectl create -f nginx.yaml \nkubectl apply -f ./my-manifest.yaml       # create resource(s)\nkubectl apply -f ./my1.yaml -f ./my2.yaml # create from multiple files\nkubectl run nginx --image=nginx   # create an NGINX Pod\nkubectl run nginx --image=nginx --dry-run=client -o yaml # generate POD Manifest YAML file (-o yaml). Don\u2019t create it(\u2013dry-run)\nkubectl run -i --tty busybox --image=busybox:1.28 -- sh  # Run pod as interactive shell\nkubectl run nginx --image=nginx -n mynamespace      # Start a single instance of nginx pod in the namespace of mynamespace\nkubectl run nginx --image=nginx --dry-run=client -o yaml > pod.yaml # Generate spec for running pod nginx and write it into a file called pod.yaml\n\n# Interact with Pods\nkubectl edit pod <my-pod>       # edit pod yaml file\nkubectl expose pod nginx --type=NodePort --port=80 --name=nginx-service --dry-run=client -o yaml # create a service named nginx to type NodePort to expose pod nginx's port 80 on port 30080 on the nodes\nkubectl expose pod redis --port=6379 --name redis-service # create service to expose the redis application within the cluster on port 6379\nkubectl attach my-pod -i                            # attach to Running Container\nkubectl port-forward my-pod 5000:6000               # listen on port 5000 on the local machine and forward to port 6000 on my-pod\nkubectl exec my-pod -- ls /                         # run command in existing pod (1 container case)\nkubectl exec --stdin --tty my-pod -- /bin/sh        # interactive shell access to a running pod (1 container case)\nkubectl exec my-pod -c my-container -- ls /         # run command in existing pod (multi-container case)\nkubectl replace -f manifest.yaml --force            # deletes the resources and creates a new one\n\n# Label Pods\nkubectl label pods my-pod new-label=awesome                      # add a Label\nkubectl label pods my-pod new-label-                             # remove a label\nkubectl label pods my-pod new-label=new-value --overwrite        # overwrite an existing value\n\n# Delete services\nkubectl delete pod <my-pod>                                       # delete pod\nkubectl delete -f ./pod.json                                      # delete a pod using the type and name specified in pod.json\nkubectl delete pod unwanted --now                                 # delete a pod with no grace period\nkubectl delete pod,service baz foo                                # delete pods and services with same names \"baz\" and \"foo\"\nkubectl delete pods,services -l name=myLabel                      # delete pods and services with label name=myLabel\nkubectl -n my-ns delete pod,svc --all                             # delete all pods and services in namespace my-ns,\nkubectl get pods  -n mynamespace --no-headers=true | awk '/pattern1|pattern2/{print $1}' | xargs  kubectl delete -n mynamespace pod # delete all pods matching the awk pattern1 or pattern2\n\n# Pod Logs and debugging\nkubectl logs my-pod                                 # dump pod logs (stdout)\nkubectl logs -l name=myLabel                        # dump pod logs, with label name=myLabel (stdout)\nkubectl logs my-pod --previous                      # dump pod logs (stdout) for a previous instantiation of a container\nkubectl logs my-pod -c my-container                 # dump pod container logs (stdout, multi-container case)\nkubectl logs -l name=myLabel -c my-container        # dump pod container logs, with label name=myLabel (stdout)\nkubectl logs my-pod -c my-container --previous      # dump pod container logs (stdout, multi-container case) for a previous instantiation of a container\nkubectl logs -f my-pod                              # stream pod logs (stdout)\nkubectl logs -f my-pod -c my-container              # stream pod container logs (stdout, multi-container case)\nkubectl logs -f -l name=myLabel --all-containers    # stream all pods logs with label name=myLabel (stdout)\nkubectl debug my-pod -it --image=busybox:1.28       # Create an interactive debugging session witin existing pod and immediately attach to it\nkubectl debug node/my-node -it --image=busybox:1.28 # Create an interactive debugging session on a node and immediately attach to it\n\n# Show metrics of Pods\nkubectl top pod                                     # Show metrics for all pods in the default namespace\nkubectl top pod POD_NAME --containers               # Show metrics for a given pod and its containers\nkubectl top pod POD_NAME --sort-by=cpu              # Show metrics for a given pod and sort it by 'cpu' or 'memory'\n"})}),"\n",(0,s.jsx)(n.h3,{id:"replicaset",children:"ReplicaSet"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"kubectl get replicaset            # list ReplicaSet\nkubecctl describe replicaset <my-replicaset> # describe ReplicaSet\n\nkubectl create -f replicaset.yaml   # create new ReplicaSet\nkubectl delete replicaset <my-replicaset>  # delete ReplicaSet\nkubectl edit replicaset <my-replicaset>    # edit ReplicaSet\nkubectl scale replicaset <my-replicaset> --replicas=5 # scale ReplicaSet to 5 Pods\n"})}),"\n",(0,s.jsx)(n.h3,{id:"deployment",children:"Deployment"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"# list deployment\nkubectl describe deployment\nkubectl get deployment <my-dep>     # list a particular deployment\n\n# create deployments\nkubectl create deployment nginx --image=nginx # start a single instance of nginx\nkubectl create deployment nginx --image=nginx --dry-run=client -o yaml # generate deployment YAML file (-o yaml). Don\u2019t create it(\u2013dry-run)\nkubectl create deployment nginx --image=nginx --replicas=4 # generate deployment with 4 replicas\n\n# modify or scale deployment\nkubectl expose deployment nginx --port 80 # expose deployment port 80\nkubectl scale deployment nginx --replicas=4 # scale a deployment\nkubectl create deployment nginx --image=nginx --dry-run=client -o yaml > nginx-deployment.yaml # scale/modify by modifying the YAML file\nkubectl edit deployment nginx # Update deployment file\nkubectl set image deployment nginx nginx=nginx:1.18\n"})}),"\n",(0,s.jsx)(n.h3,{id:"namespace",children:"Namespace"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"kubectl get namespaces   # list all namespaces\nkubectl describe namespace\nkubectl create ns <name> # create new namespace\nkubectl config set-context $(kubectl config current-context) --namespace=dev # switch permantly to new namespace\n"})}),"\n",(0,s.jsx)(n.h3,{id:"cluster",children:"Cluster"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"kubectl config -h               # context config help\nkubectl config get-contexts     # context allow you to switch between different clusters\nkubectl config current-context  # check wich cluster (context) you are currently working with\nkubectl config use-context <context-name> # switch between contexts\n\nkubectl cluster-info # check cluster info\nkubectl cluster-info dump # to further debug and diagnose cluster problems\n"})}),"\n",(0,s.jsx)(n.h3,{id:"env-var-configmaps-and-secrets",children:"Env Var, ConfigMaps and Secrets"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"# ConfigMaps\nkubectl get configmaps            # list all ConfigMaps\nkubectl describe configmap       # describe ConfigMaps\nkubectl create configmap <config-name> -from-literal=<key>=<value>  # create new ConfigMap\n\n# secrets\nkubectl get secrets                        # list all secrets\nkubectl describe secret app-secret -o yaml # to get the secrets\nkubectl create secret generic <secret-name> --from-literal=<key>=<value>\necho -n 'mysql' | base64                   # encode secrets\necho -n 'bxlzd=2' | base64 --decode        # decode secret\n"})}),"\n",(0,s.jsx)(n.h3,{id:"service-cluster-ip",children:"Service Cluster IP"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"kubectl create service clusterip redis --tcp=6379:6379 --dry-run=client -o yaml # create a service named redis-service of type ClusterIP\n"})}),"\n",(0,s.jsx)(n.h3,{id:"nodes",children:"Nodes"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"kubectl describe nodes my-node # Describe commands with verbose output\n\nkubectl label nodes node-name label-key=label-value              # Add a label to node\nkubectl label nodes node-name label-key-                         # Remove a label from node\n"})}),"\n",(0,s.jsx)(n.h3,{id:"rolling-updates-and-rollback",children:(0,s.jsx)(n.a,{href:"https://spot.io/resources/kubernetes-autoscaling/5-kubernetes-deployment-strategies-roll-out-like-the-pros/",children:"Rolling Updates and Rollback"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:'kubectl set image deployment/frontend www=image:v2               # Rolling update "www" containers of "frontend" deployment, updating the image\nkubectl rollout history deployment/frontend                      # Check the history of deployments including the revision\nkubectl rollout undo deployment/frontend                         # Rollback to the previous deployment\nkubectl rollout undo deployment/frontend --to-revision=2         # Rollback to a specific revision\nkubectl rollout status -w deployment/frontend                    # Watch rolling update status of "frontend" deployment until completion\nkubectl rollout restart deployment/frontend                      # Rolling restart of the "frontend" deployment\n\n\n# Annotation\nkubectl annotate pods my-pod icon-url=http://goo.gl/XXBTWq       # Add an annotation\nkubectl annotate pods my-pod icon-url-                           # Remove annotation\n\n# Autoscale\nkubectl autoscale deployment foo --min=2 --max=10                # Auto scale a deployment "foo"\n'})}),"\n",(0,s.jsx)(n.h3,{id:"update-objects",children:"Update objects"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"\nkubectl replace -f nginx.yaml\n\nkubectl delete -f nginx.yaml\n\nkubectl apply -f nginx.yaml\n"})}),"\n",(0,s.jsx)(n.h3,{id:"interacting-with-nodes-and-cluster",children:"Interacting with Nodes and cluster"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:'kubectl cordon my-node                                                # Mark my-node as unschedulable\nkubectl drain my-node                                                 # Drain my-node in preparation for maintenance\nkubectl uncordon my-node                                              # Mark my-node as schedulable\nkubectl top node/pod                                                  # Show metrics for all nodes/pods\nkubectl top node my-node                                              # Show metrics for a given node\nkubectl cluster-info                                                  # Display addresses of the master and services\nkubectl cluster-info dump                                             # Dump current cluster state to stdout\nkubectl cluster-info dump --output-directory=/path/to/cluster-state   # Dump current cluster state to /path/to/cluster-state\n\n# Taints to nodes\nkubectl taint nodes <node-name> key=value:<taint-effect> # taint-effect: NoSchedule | PreferNoSchedule | NoExecute\nkubectl taint nodes <node-name> node-role.kubernetes.io/<node-name>:NoSchedule- # "-" command to untaint the node\n\n# Tolerations - PODs\n\nkubectl -n <namespace> exec -it <pod_name> -- cat /log/app.log        # Execute command inside container\n'})}),"\n",(0,s.jsx)(n.h3,{id:"upgrade-plan",children:"Upgrade plan"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"kubeadm upgrade plan\nkubeadm upgrade apply\n"})}),"\n",(0,s.jsx)(n.h3,{id:"backup-and-restore-methods",children:"Backup and Restore Methods"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh"})}),"\n",(0,s.jsx)(n.h3,{id:"inspect-service-logs",children:"Inspect Service Logs"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"journalctl -u etcd.service -l\nkubectl logs etcd-master\n"})}),"\n",(0,s.jsx)(n.h4,{id:"service-acccount",children:"Service Acccount"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"kubectl create serviceaccount <name>   # create service account\nkubectl get serviceaccount             # list all service accounts\nkubectl describe serviceaccount <name> # get details about service account\n"})}),"\n",(0,s.jsx)(n.h3,{id:"security",children:"Security"}),"\n",(0,s.jsx)(n.h4,{id:"certificates",children:"Certificates"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"kubectl get csr # get a list of all CSR\nkubectl get csr <name> -o yaml  # get data about a CSR request\nkubectl certificate approve <name> # approve a CSR request\nkubectl certificate deny <name> # reject CSR request\nkubectl delete csr <name> # delete CSR request object\n"})}),"\n",(0,s.jsx)(n.h4,{id:"api-groups",children:"API Groups"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"curl http://localhost:6443 -k # list any available API groups\nkubectl api-resources --namespaced=true #get full list of api resources\n"})}),"\n",(0,s.jsx)(n.h4,{id:"role-based-access-controls",children:"Role Based Access Controls"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"kubectl get roles\nkubectl describe role <role> \nkubectl get rolebindings\nkubectl describe rolebinding <role_binding_name>\n\nkubectl create role developer --namespace=default --verb=list,create,delete --resource=pods # create a role\nkubectl create rolebinding dev-user-binding --namespace=default --role=developer --user=dev-user # create a rolebinding\n\nkubectl auth can-i create deployments --as <user> # check if you have access as user\n"})}),"\n",(0,s.jsx)(n.h4,{id:"cluster-roles-access-controls",children:"Cluster Roles Access Controls"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"kubectl get clusterroles\nkubectl get clusterrolebindings\nkubectl describe clusterrolebindings <cluster_role_binding_name>\n"})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);